Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

=============================
class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        #creation of a list and a hash map for returning the result and storing frequency table
        dict={}
        result=[]
        
        # selection and swaping the minimum length array to nums2
        if len(nums1) > len(nums2):
            nums1,nums2=nums2,nums1
        
        #Generation of frequency table
        for num in  nums2:
            dict[num] = dict.get(num,0)+1
            
        # Checking with the larger arry for matches and generating result list
        while nums1:
            key=nums1.pop()
            if key in nums2  and dict[key] > 0:
                result.append(key)
                dict[key]=0
        return result           
