12. Integer to Roman
Medium

3897

4355

Add to List

Share
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given an integer, convert it to a roman numeral.

 

Example 1:

Input: num = 3
Output: "III"
Explanation: 3 is represented as 3 ones.
Example 2:

Input: num = 58
Output: "LVIII"
Explanation: L = 50, V = 5, III = 3.
Example 3:

Input: num = 1994
Output: "MCMXCIV"
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
===========================================================


class Solution:
    def intToRoman(self, num: int) -> str:
        
        #Inserting the elements in the list in an asc order
        # so that when it is traversed it picks up the larger value
        # this is why we traverse from the last
        
        symList = [["I", 1], ["IV", 4], ["V", 5],["IX",9],["X",10],["XL",40],["L",50],["XC",90],["C",100],["CD",400],["D",500],["CM",900],["M",1000]]
        
        # Creating an empty string to store the symbols
        result = ""
        
        # For nested list -  sym = 1st value
        # val = 2nd value
        for sym,val in reversed(symList):
            # 999/900 --->1
            if num//val:
                count=num//val
                
                # print(count)
                # if 3 then I *3=III
                result=result+(sym*count)
                
                # for reducing the digits
                num=num%val
                
        return result
            
 ==========================================
 
 #Another solution:
 
 class Solution:
    def intToRoman(self, num):
        dict = {
            1: "I", 4: "IV", 5: "V", 9: "IX",
            10: "X", 40: "XL", 50: "L", 90: "XC",
            100: "C", 400: "CD", 500: "D", 900: "CM",
            1000: "M"
        }
        result = []
        keys = reversed(dict.keys())

        for k in keys:                  # start from the largest key value
            while num >= k:             # if num is greater than current key
                result.append(dict[k])  # append the Roman char(s) to result
                num -= k                # subtract value from num

        return "".join(result)
                    
                    
            
