Given a string array words, return an array of all characters that show up in all strings within the words (including duplicates).
You may return the answer in any order.

 

Example 1:

Input: words = ["bella","label","roller"]
Output: ["e","l","l"]
Example 2:

Input: words = ["cool","lock","cook"]
Output: ["c","o"]
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length <= 100
words[i] consists of lowercase English letters.
======================================================
Approach - Hash map

Step 1: count all letter in first word, save result in hash table "count"
Step 2: for each letter in first word, check if it exists in all the rest words, if exist:
Step 3: find the min counts for that letter, and overwrite the count value in hash table. if doesn't exist:
Step 4: overwrite the count of that letter to 0, and break the inner loop
Step 5: define an empty list l, for all the letter in hash table, use the l= l+[letter] *count to generate final answer



======================================================
class Solution:
    def commonChars(self, words: List[str]) -> List[str]:
        # create an empty dictionary
        dict={}
        
        # Generate a frequency hash map
        for item in words[0]:
            dict[item]=dict.get(item,0)+1
        
        #comparing the elements of the freq hash map to all 
        for x in dict:
            # traverse thro' all the words string array with its length
            for y in range(1,len(words)):
                #comparing , if present replace with min
                if x in words[y]:
                    dict[x]= min(dict[x],words[y].count(x))
                else:
                    #If not present replace with 0
                    dict[x]=0
        
        # Creating an empty list and adding up its value
        result=[]
        for k,v in dict.items():
            result = result + v * [k]
        return result  
