# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
'''
Lets consider a brief example;
         --1
        /    \
    --2      --3
    /   \     /  \
--4    --5 --6  --7

There are about 2 approaches to solve this 
1. recursion
2. iteration

Recursion:
   Every time in preorder traversal all nodes gets visited only once
   root, left , right
   the order will be [1,2,4,5,3,6,7]
   For recursion we have to identify the base case(when will the recursion stop/end point for a recursion) and the recursive case
   Base case: if root is None return the empty list
   recursive case: traverse root + call function with left +call function with right
   [1],2()
   [2],4()
   [4],[],[]
   
   right of 4 -->5
   5()-->[],[]
   [5]
   [4,5]-->[2,4,5]-->[1,2,4,5]
   right of 1 -->3
   [3],6()
   [6],[],[]
   [7],[] [] ------>[6,7] --->[3,6,7]-->[1,2,4,5,3,6,7]
   
Iteration:
  In Iteration we use stach which is push and pop. As stack is last in first out for easy accessing of left elements we folllow root-->right--Left
  when left is poped , it will be printed
  stack=[1] // intially root will be in stack
   res=[]     // elements poped from stack will be inserted in res
   
   stack=[], res=[1], stack=[3,2]   
   stack=[3] , res=[1,2], stack=[3,5,4]
   stack=[3,5] , res=[1,2,4] , stack=[3,5]
   stack=[3], res=[1,2,4,5] , stack=[3,7,6]
   stack=[], res=[1,2,4,5,3] , stack=[7,6]
   stack=[7] , res=[1,2,4,5,3,6] , stack=[7]
   stack=[]   ,res=[1,2,4,5,3,6,7] , stack=[]
  
'''
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        #base case
        # if root is None:
        #     return []
        # #recursive case [] for root.val since we r returning list of numbers
        # else:
        #     return [root.val] + self.preorderTraversal(root.left) +self.preorderTraversal(root.right)
        stack=[root]
        res=[]
        if root is None:
            return []
        while stack !=[]:
            root=stack.pop()
            res.append(root.val)
            if root.right is not None:
                stack.append(root.right)
            if root.left is not None:
                stack.append(root.left)
        return res         
            
      
